generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AppSettings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String

  @@map("app_settings")
}

model User {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  name       String
  username   String    @unique
  password   String
  avatar     String?
  last_login DateTime?
  role       Role

  phone_number String?
  email        String?

  attendances Attendance[]
  permission  Permission[]

  received_notifications Notification[] @relation("ReceivedNotifications")
  sent_notifications     Notification[] @relation("SentNotifications")

  division_lead Division[] @relation("division_to_leader")

  division Division? @relation(name: "division_to_member", fields: [division_id], references: [id])
  division_id String?

  @@map("user")
}

model Division {
  id         String    @id @default(uuid())
  name       String

  users User[] @relation("division_to_member")

  leader User? @relation(name: "division_to_leader", fields: [leader_id], references: [id])
  leader_id String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("division")
}

model Notification {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  resource_path String?

  title   String
  message String  @db.Text
  read    Boolean @default(false)

  recipient_id String
  recipient    User   @relation(name: "ReceivedNotifications", fields: [recipient_id], references: [id])

  sender_id String?
  sender    User?   @relation(name: "SentNotifications", fields: [sender_id], references: [id])

  @@index([recipient_id])
  @@index([sender_id])
  @@map("notification")
}

model Attendance {
  id Int @id @default(autoincrement())

  date DateTime @default(now())

  clock_in_at  DateTime?
  clock_out_at DateTime?

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  overtime_hours Float?

  status AttendanceStatus

  @@unique([date, user_id])
  @@map("attendance")
}

enum AttendanceStatus {
  ATTEND
  ABSENT
  EXCUSED

  @@map("attendance_status")
}

model Permission {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  reason     String
  days_count Int
  proof      String?
  status     PermissionStatus @default(PENDING)
  type       PermissionType

  rejected_reason String?

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  date_start DateTime
  date_end   DateTime

  @@map("permission")
}

enum PermissionStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("permission_status")
}

enum PermissionType {
  FULL
  EARLY_LEAVE
  LATE

  @@map("permission_type")
}

enum Role {
  admin
  employee

  @@map("role")
}
